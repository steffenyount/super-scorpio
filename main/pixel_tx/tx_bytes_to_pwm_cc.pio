;  Copyright (C) 2024 Steffen Yount
;
;  Licensed under the Apache License, Version 2.0 (the "License");
;  you may not use this file except in compliance with the License.
;  You may obtain a copy of the License at
;
;  http://www.apache.org/licenses/LICENSE-2.0
;
;  Unless required by applicable law or agreed to in writing, software
;  distributed under the License is distributed on an "AS IS" BASIS,
;  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;  See the License for the specific language governing permissions and
;  limitations under the License.

.program tx_bytes_to_pwm_cc

.wrap_target
    pull                ; Load "pwm_slice_tx_bytes" value
    in osr, 31
    in null, 1          ; Sending (tx_bytes << 1) for loop back + auto-push
    mov osr, ::osr      ; Bit-reverse the value to make its top bits accessible for "IN" instructions

    ; assemble left 16-bit B-channel PWM CC value for tx_byte - 0 (0b000): off, 3 (0b011): low, 7 (0b111): high
    in null, 13
    in osr, 1           ; bit from "tx_byte.curr_byte"
    out null, 8         ; advance to "tx_byte.tx_enabled"
    in osr, 1           ; bit from "tx_byte.tx_enabled"
    in osr, 1           ; bit from "tx_byte.tx_enabled"

    out null, 8         ; advance to next "tx_byte"

    ; assemble right 16-bit A-channel PWM CC value for tx_byte - 0 (0b000): off, 3 (0b011): low, 7 (0b111): high
    in null, 13
    in osr, 1           ; bit from "tx_byte.curr_byte"
    out null, 8         ; advance to "tx_byte.tx_enabled"
    in osr, 1           ; bit from "tx_byte.tx_enabled"
    in osr, 1           ; bit from "tx_byte.tx_enabled" + auto-push
.wrap

% c-sdk {
static inline void tx_bytes_to_pwm_cc_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config sm_cfg = tx_bytes_to_pwm_cc_program_get_default_config(offset);

    // OUT shifts to right, no autopull
    sm_config_set_out_shift(&sm_cfg, true, false, 32);
    // IN shifts to left, with autopull
    sm_config_set_in_shift(&sm_cfg, false, true, 32);

    pio_sm_init(pio, sm, offset, &sm_cfg);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void init_pio_sms_for_tx_bytes_to_pwm_cc_program() {
    uint offset = pio_add_program(pio1, &tx_bytes_to_pwm_cc_program);
    for (uint sm = 0; sm < NUM_PIO_STATE_MACHINES; sm++) {
        tx_bytes_to_pwm_cc_program_init(pio1, sm, offset);
    }
}
%}